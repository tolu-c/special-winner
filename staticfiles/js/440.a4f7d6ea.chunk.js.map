{"version":3,"file":"static/js/440.a4f7d6ea.chunk.js","mappings":"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","sources":["components/UI/Form/Button.tsx","components/SignUp.tsx","pages/Register.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { ButtonProps } from \"../../../types\";\n\nexport const Button: FC<ButtonProps> = ({ title, type, onClick }) => {\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      className=\"text-base font-semibold text-white bg-slate-800 hover:bg-slate-950 p-2 px-4 rounded-lg w-full\"\n    >\n      {title}\n    </button>\n  );\n};\n","import { FormEvent, useRef, useState } from \"react\";\nimport { Button } from \"./UI/Form/Button\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { RegisterData } from \"../types\";\n\nconst API = process.env.REACT_APP_API;\n\nexport const SignUp = () => {\n  const usernameRef = useRef<HTMLInputElement>(null);\n  const passwordRef = useRef<HTMLInputElement>(null);\n  const emailRef = useRef<HTMLInputElement>(null);\n\n  const [errorMessage, setErrorMessage] = useState<string>(\"\");\n  const navigate = useNavigate();\n\n  const userSignUp = async (data: RegisterData) => {\n    const response = await fetch(`${API}/register/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    const responseData = await response.json();\n\n    if (response.ok) {\n      navigate(\"/login\");\n    } else {\n      if (response.ok) {\n        navigate(\"/login\");\n      } else {\n        setErrorMessage(\n          responseData.username\n            ? responseData.username[0]\n            : responseData.email\n            ? responseData.email[0]\n            : responseData.password\n            ? responseData.password[0]\n            : \"Something went wrong\"\n        );\n      }\n    }\n  };\n\n  const handleRegister = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData: RegisterData = {\n      username: usernameRef.current!.value,\n      password: passwordRef.current!.value,\n      email: emailRef.current!.value,\n    };\n    userSignUp(formData);\n  };\n\n  return (\n    <div className=\"flex gap-4 justify-center items-center w-full h-screen\">\n      <div className=\"flex flex-col gap-8 w-full items-center\">\n        <h2 className=\"text-slate-950 text-lg md:text-xl font-semibold w-max\">\n          Create a new account\n        </h2>\n        <form\n          onSubmit={handleRegister}\n          className=\"w-5/6 md:w-3/4 flex flex-col gap-4\"\n        >\n          <div className=\"w-full flex flex-col gap-2\">\n            <label\n              htmlFor=\"email\"\n              className=\"text-sm font-semibold text-slate-800 cursor-pointer\"\n            >\n              Email\n            </label>\n            <input\n              type=\"text\"\n              id=\"email\"\n              name=\"email\"\n              ref={emailRef}\n              required\n              className=\"rounded-md shadow focus:shadow-md focus:outline-none focus:border focus:border-slate-950 focus:ring-1 focus:ring-slate-950\"\n            />\n          </div>\n          <div className=\"w-full flex flex-col gap-2\">\n            <label\n              htmlFor=\"username\"\n              className=\"text-sm font-semibold text-slate-800 cursor-pointer\"\n            >\n              Username\n            </label>\n            <input\n              type=\"text\"\n              id=\"username\"\n              name=\"username\"\n              ref={usernameRef}\n              required\n              className=\"rounded-md shadow focus:shadow-md focus:outline-none focus:border focus:border-slate-950 focus:ring-1 focus:ring-slate-950\"\n            />\n          </div>\n          <div className=\"w-full flex flex-col gap-2\">\n            <label\n              htmlFor=\"password\"\n              className=\"text-sm font-semibold text-slate-800 cursor-pointer\"\n            >\n              Password\n            </label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              ref={passwordRef}\n              required\n              className=\"rounded-md shadow focus:shadow-md focus:outline-none focus:border focus:border-slate-950 focus:ring-1 focus:ring-slate-950\"\n            />\n          </div>\n          <div className=\"w-full flex flex-col gap-2\">\n            <Button type=\"submit\" title=\"Register\" />\n          </div>\n          {errorMessage && (\n            <p className=\"text-sm text-amber-700 font-medium\">{errorMessage}</p>\n          )}\n        </form>\n        <div className=\"\">\n          <p className=\"text-sm font-normal text-slate-700\">\n            Already a member?{\" \"}\n            <Link\n              to=\"/login\"\n              className=\"text-slate-950 font-semibold hover:underline\"\n            >\n              Sign in\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { SignUp } from \"../components/SignUp\";\n\nconst Register = () => {\n  return <SignUp />;\n};\n\nexport default Register;\n"],"names":["Button","_ref","title","type","onClick","_jsx","className","children","SignUp","usernameRef","useRef","passwordRef","emailRef","_useState","useState","_useState2","_slicedToArray","errorMessage","setErrorMessage","navigate","useNavigate","userSignUp","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","response","responseData","wrap","_context","prev","next","fetch","concat","process","method","headers","body","JSON","stringify","sent","json","ok","username","email","password","stop","_x","apply","arguments","_jsxs","onSubmit","event","preventDefault","formData","current","value","htmlFor","id","name","ref","required","Link","to"],"sourceRoot":""}